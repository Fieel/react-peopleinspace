{"version":3,"sources":["components/Counter.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["react_default","a","createElement","this","props","number","React","Component","listItems","people","map","item","href","name","className","craft","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","error","numerOfPeopleInSpace","listOfPeopleInSpace","_this2","setState","fetch","then","res","json","result","Counter_default","List_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAIQ,OACIA,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,eAHCC,IAAMC,8LCE/B,IAAMC,EAAYL,KAAKC,MAAMK,OAAOC,IAAI,SAACC,GAAD,OACtCX,EAAAC,EAAAC,cAAA,KAAGU,KAAM,iCAAmCD,EAAKE,MAC/Cb,EAAAC,EAAAC,cAAA,KAAGY,UAAU,uBAAuBH,EAAKE,KAAzC,KAAiDF,EAAKI,UAG1D,OACEf,EAAAC,EAAAC,cAAA,OAAKY,UAAU,kBACZN,UAToBF,IAAMC,WCiDpBS,cA7Cb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KACDmB,MAAQ,CACXC,WAAW,EACXC,OAAO,EACPC,qBAAsB,KACtBC,oBAAqB,IANNV,mFAWC,IAAAW,EAAAzB,KAClBA,KAAK0B,SAAS,CACZL,WAAW,IAGbM,MAAM,0CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCN,EAAKC,SAAS,CACZL,WAAW,EACXE,qBAAsBQ,EAAO7B,OAC7BsB,oBAAqBO,EAAOzB,UAGhC,SAACgB,GACCG,EAAKC,SAAS,CACZL,WAAW,EACXC,OAAO,uCAOf,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,CAAS9B,OAAQF,KAAKoB,MAAMG,uBAC5B1B,EAAAC,EAAAC,cAACkC,EAAD,CAAM3B,OAAQN,KAAKoB,MAAMI,8BAzCfpB,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,eD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.37bc1a4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class extends React.Component{\r\n    render(){\r\n        return (\r\n            <h1>{this.props.number}</h1>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n  render() {\r\n    const listItems = this.props.people.map((item) =>\r\n      <a href={'https://en.wikipedia.org/wiki/' + item.name}>\r\n        <p className='astronaut-list-item'>{item.name}, {item.craft}</p>\r\n      </a>\r\n    );\r\n    return (\r\n      <div className='astronaut-list'>\r\n        {listItems}\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport Counter from './components/Counter';\nimport List from './components/List';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      error: false,\n      numerOfPeopleInSpace: null,\n      listOfPeopleInSpace: []\n    }\n  }\n\n  // React hook, fetching the API here\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    fetch(\"http://api.open-notify.org/astros.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoading: false,\n            numerOfPeopleInSpace: result.number,\n            listOfPeopleInSpace: result.people\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoading: false,\n            error: true\n          });\n        }\n      )\n  }\n\n  render() {\n    return (\n      <div>\n        <Counter number={this.state.numerOfPeopleInSpace} />\n        <List people={this.state.listOfPeopleInSpace} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('react-root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}